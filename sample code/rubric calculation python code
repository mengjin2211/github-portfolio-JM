# return to Portfolio page: https://github.com/mengjin2211/github-portfolio-JM/edit/main
# packages used: 
import pandas as pd
import os
from datetime import date, datetime
import openpyxl
import xlsxwriter
import xlwings as xw  # to insert image in excel
import matplotlib.pyplot as plt
import numpy as np
import gspread
import pygsheets
import pprint as pp
import dateutil.relativedelta
from oauth2client.service_account import ServiceAccountCredentials
from df2gspread import df2gspread as d2g
from gspread_dataframe import get_as_dataframe, set_with_dataframe

# obtain performance data from even log from splunk and project management software 
df_measure1=pd.read_csv('measure1.csv')
df_measure2_added=pd.read_csv('measure2.csv')
df_measure3=pd.read_csv('measure3.csv')

df_index=df_index.rename(columns={"..."})
df_url_added=df_url_added.rename(columns={"..."})
df_url_added.drop(['percent'], axis=1, inplace=True)
                                     "..."})
# access SQL database  
tunnel = SSHTunnelForwarder(
    ('xxxx', xxx),
    ssh_username="xxxx",
    ssh_private_key='xxxx',
    #ssh_pkey='xxxx',
    ssh_private_key_password='xxxx',
    remote_bind_address=('xxxx.xxx.com', xxxx),
    local_bind_address=('localhost',xxxx),  
)
# Start the tunnel
tunnel.start()
# Create a database connection
conn = psycopg2.connect(
    database="xxxx",
    user="xxxx",
    password="xxxx",
    host=tunnel.local_bind_host,
    port=tunnel.local_bind_port
    
)
# skip lines here for dataframe manipulation synchronizing different data sources
 
df_summary = pd.DataFrame(data)

# calculate stat for benchmark using previous quarter average
# skip lines here for benchmark 


measure1_hr_avg=df['measure1_cat'].sum()/project_time
measure2_hr_avg=df['measure2_cat'].sum()/project_time
measure3_hr_avg=df[''measure3_cat''].sum()/project_time
data = {'hourly_measure1': measure1_hr_avg,
        'hourly_measure2': measure2_hr_avg,
        'hourly_measure3': measure3_hr_avg}

df = pd.DataFrame(data,index=[0])
 
# skip lines here for benchmark charts 

import os

if os.path.exists(directory_path + 'plt1_img.png'):
    print("File path exists!")
else:
    print("File path does not exist.")
import base64

# Directory path where the images are located
directory_path = 'define your default folder'

# Define a function to load images
def load_image(image_path):
    try:
        with open(image_path, 'rb') as f:
            image_data = f.read()
        return 'data:image/png;base64,' + base64.b64encode(image_data).decode()
    except Exception as e:
        print(f"Error loading image: {e}")
        return None

# Load images
plt1_image = load_image(directory_path + 'plt1_img.png')
plt2_image = load_image(directory_path + 'plt2_img.png')
plt3_image = load_image(directory_path + 'plt3_img.png')
table_image = load_image(directory_path + 'table_image.png')

# Define the HTML content for the dashboard
html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Dashboard</title>
    <style>
        .image-container {{
            margin-bottom: 20px;
            text-align: center;
        }}
        .image-container img {{
            max-width: 100%; /* Set maximum width to maintain aspect ratio */
            height: auto; /* Ensure images scale proportionally */
        }}
    </style>
</head>
<body>
    <div class="image-container">
        <h2>YTD Metrics and Progress</h2>
        <img src="{table_image}" alt="Metrics">
    </div>
    <div class="image-container">
        <h2>Demand vs Production</h2>
        <img src="{plt1_image}" alt="Demand vs Production">
    </div>
    <div class="image-container">
        <h2>Weekly Work Queue</h2>
        <img src="{plt2_image}" alt="Weekly Work Queue">
    </div>
    <div class="image-container">
        <h2>Monthly Production</h2>
        <img src="{plt3_image}" alt="Monthly Production">
    </div>

</body>
</html>
"""

# Write the HTML content to a file
with open('dashboard.html', 'w') as file:
    file.write(html_content)

print("Dashboard HTML file generated successfully!")
